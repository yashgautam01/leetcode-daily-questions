class Solution {
    public List<Integer> spiralOrder(int[][] mat) {
        ArrayList<Integer> l1= new ArrayList<>();
        int t =0;
        
        int b = mat.length-1;
        int r =mat[0].length-1;
        int l = 0;
        while(l<=r || t<=b){
            if(t<=b){
                for(int i= l ;i<=r;i++){
                    l1.add(mat[t][i]);
                }
                t++;
            }
            if(l<=r){
                for(int i= t;i<=b;i++){
                    l1.add(mat[i][r]);

                }
                r--;
            }
            if(t<=b){
                for(int i=r;i>=l;i--){
                    l1.add(mat[b][i]);
                }
                b--;
            }
            if(l<=r){
                for(int i=b;i>=t;i--){
                    l1.add(mat[i][l]);
                }
                l++;
            }
        }
        return l1;
        
    }
}
/*

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> l1 = new ArrayList<Integer>();
        //left
        int l=0,b=matrix.length-1,r=matrix[0].length-1,t=0;
        while(l<=r || t<=b){
                if(t<=b){
                    for(int i=l;i<=r;i++)
                    l1.add(matrix[t][i]);
                    t++;
                }
                if(l<=r){
                    for(int i=t;i<=b;i++)
                    l1.add(matrix[i][r]);
                    r--;
                }
                if(t<=b){
                    for(int i=r;i>=l;i--)
                    l1.add(matrix[b][i]);
                    b--;
                }
                if(l<=r){
                    for(int i=b;i>=t;i--)
                    l1.add(matrix[i][l]);
                    l++;
                }
        }
        return l1;
    }
}*/
